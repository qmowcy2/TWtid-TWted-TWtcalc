! Editing Wiki Text in the View Mode
TWtid+TWted is a combination of plugins that gives you the possibility to edit wiki text in the view mode.
!! Why?

>''Can't find the text!''

Wiki text is easy, compared to HTML, to create a web page using a __simple text editor__. For example, to create the following table
|H1|H2|H3|h
|C11|C12|C13|
|C21|C22|C23|

with HTML markups, one would say
{{{
<table>
<tr><th>H1</th><th>H2</th><th>H3</th></tr>
<tr><td>C11</td><td>C12</td><td>C13</td></tr>
<tr><td>C21</td><td>C22</td><td>C23</td></tr>
</table>
}}}
However, with wiki markups (or markdowns if you like) it becomes much simpler (~TiddlyWiki markup),
{{{
|H1|H2|H3|h
|C11|C12|C13|
|C21|C22|C23|
}}}
Personally I think many wiki lovers are attracted to it for this simplicity. At least I am. Simple tools are usually easy to do simple tasks, which can easily bring people a feeling of success. However, simple tools can also be difficult to complete a complicated task, which can make people frustrated instead. Take ~TiddlyWiki for example,  it is so easy to get started and I found myself stuck on it within a short time. I kept creating more and more complicated pages and it all seemed to work just fine! Everything was great until one day I had to change one table in a not-so-short tiddler: I couldn't find the text to edit!

I needed an easier way to edit tables in a large tiddler!

!! What?

> ''Edit where I can see it.''

My idea was to edit the wiki text in the view mode, hence no need to find the text in the poor editor with my poor eyes and easily tired brain. I searched a while over the net for a solution and couldn't find one suitable for ~TiddlyWiki. Then I gave up searching and started to create one of my own. It started with the TableEditor which supported simple editing of table cell contents, then evolved into TWtable+TWted that supported more features such as multi-lined cell content, lists in a cell, etc., and later to TWtid+TWted combination that supports view mode editing on most of the block elements in addition to tables.

Some people might say: 
>"//Tiddlers are not meant to be large. Cut it! Dude!//"
That's all right. But that was old thought. If your car can run 300 km/hr, would you be happy to drive it at 50 in the city, or to create a place that you can enjoy the speed?
>Besides, cutting a large tiddler could end up with too many small tiddlers, which could bring me another problem: I would need to edit a lot of small tiddlers just to finish one task. Worse yet, that could bring me back to the same situation: I couldn't find the text to edit!

!! How?

> ''Find the missing half!''

The heart of editing wiki text in the view mode is to find the correspondence between a DOM element and its defining wiki text, and vice versa.

The TWtid+TWted plugins identify a DOM element and its defining wiki text by __matching their order of appearance__. The order of appearance of a DOM element is the index number, within its own type and within the same tiddler, that it is rendered in the resulting HTML page. Similarly, the order of appearance of its corresponding wiki text is the index number, again within its own type and within the same tiddler, that it is defined in the original tiddler text. In these plugins the two indices are called rendering index and defining index, respectively.

To find the rendering index of a DOM element, one calls the {{{TWtid.element_index()}}} function. To obtain its corresponding wiki text, however, one calls the {{{TWtid.elem_first_line()}}} to obtain the beginning line number of the defining text.
> @@color:blue;These two functions will be modified soon. Their names could be changed, too.@@

> The function {{{TWtid.elem_first_line()}}} was implemented to find the defining text of a block element, with either one of the indices given. The unknown index (should be initialized to -1) will be determined along the way. For example, if the rendering index of a block element is given, then this function finds its defining wiki text and defining index at the same time.

__More to come...__
